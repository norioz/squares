var canvas;
var stage;
var screen_width;
var screen_height;
var bmpAnimation;
var numberOfImagesLoaded = 0;

var imgMonsterARun = new Image();
var imgMonsterAIdle = new Image();

function init() {
    canvas = document.getElementById("testCanvas");

    imgMonsterARun.onload = handleImageLoad;
    imgMonsterARun.onerror = handleImageError;
    imgMonsterARun.src = "img/MonsterARun.png";

    imgMonsterAIdle.onload = handleImageLoad;
    imgMonsterAIdle.onerror = handleImageError;
    imgMonsterAIdle.src = "img/MonsterAIdle.png";
}

function reset() {
    stage.removeAllChildren();
    createjs.Ticker.removeAllListeners();
    stage.update();
}

function handleImageLoad(e) {
    numberOfImagesLoaded++;

    // We're not starting the game until all images are loaded
    // Otherwise, you may start to draw without the resource and raise 
    // this DOM Exception: INVALID_STATE_ERR (11) on the drawImage method
    if (numberOfImagesLoaded == 2) {
        numberOfImagesLoaded = 0;
        startGame();
    }
}

//called if there is an error loading the image (usually due to a 404)
function handleImageError(e) {
    console.log("Error Loading Image : " + e.target.src);
}

function startGame() {
    // create a new stage and point it at our canvas:
    stage = new createjs.Stage(canvas);
    
    // grab canvas width and height for later calculations:
    screen_width = canvas.width;
    screen_height = canvas.height;
    
    // create spritesheet and assign the associated data.
    var spriteSheet = new createjs.SpriteSheet({
	// image to use
	images: [imgMonsterARun], 	
	frames: {width: 64, height: 64, regX: 32, regY: 32}, // width, height & registration point of each sprite
	animations: {	
	    walk: [0, 9, "walk", 4] // To slow down the animation, set the frequency to 4 to slow down by a 4x factor
	}
    });

    // Idle sequence of the monster
    var spriteSheetIdle = new createjs.SpriteSheet({
	images: [imgMonsterAIdle],
	frames: { width: 64, height: 64, regX: 32, regY: 32 }, 
	animations: {
            idle: [0, 10, "idle", 4]
	}
    });
    
    // to save file size, the loaded sprite sheet only includes left facing animations
    // we could flip the display objects with scaleX=-1, but this is expensive in most browsers
    // instead, we generate a new sprite sheet which includes the flipped animations
    createjs.SpriteSheetUtils.addFlippedFrames(spriteSheet, true, false, false);

    // create a BitmapAnimation instance to display and play back the sprite sheet:
    bmpAnimation = new createjs.BitmapAnimation(spriteSheet);
    bmpAnimationIdle = new createjs.BitmapAnimation(spriteSheetIdle);

    // set the registration point (the point it will be positioned and rotated around)
    // to the center of the frame dimensions:
    bmpAnimation.regX = bmpAnimation.spriteSheet.frameWidth / 2 | 0;
    bmpAnimation.regY = bmpAnimation.spriteSheet.frameHeight / 2 | 0;

    // start playing the first sequence:
    // walk_h has been generated by addFlippedFrames and
    // contained the right facing animations
    bmpAnimation.gotoAndPlay("walk_h"); 	//walking from left to right
    
    // set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
    // of animated rats if you disabled the shadow.
    bmpAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

    bmpAnimation.name = "monster1";
    bmpAnimation.direction = 90;
    bmpAnimation.vX = 1;
    bmpAnimation.x = 16;
    bmpAnimation.y = 32;

    bmpAnimationIdle.name = "monsteridle1";
    bmpAnimationIdle.x = 16;
    bmpAnimationIdle.y = 32;
    
    // have each monster start at a specific frame
    bmpAnimation.currentFrame = 10;
    stage.addChild(bmpAnimation);
    
    // we want to do some work before we update the canvas,
    // otherwise we could use Ticker.addListener(stage);
    createjs.Ticker.addListener(window);
    createjs.Ticker.useRAF = true;
    createjs.Ticker.setFPS(60);
}

function tick() {
    // Hit testing the screen width, otherwise our sprite would disappear
    if (bmpAnimation.x >= screen_width - 16) {
        // We've reached the right side of our screen
        // We need to walk left now to go back to our initial position
        bmpAnimation.direction = -90;
	bmpAnimation.gotoAndPlay("walk");
    }

    if (bmpAnimation.x < 16) {
        // We've reached the left side of our screen
        // We need to walk right now
        bmpAnimation.direction = 90;
	bmpAnimation.gotoAndStop("walk");
	stage.removeChild(bmpAnimation);
	bmpAnimationIdle.gotoAndPlay("idle");
	stage.addChild(bmpAnimationIdle);
    }

    // Moving the sprite based on the direction & the speed
    if (bmpAnimation.direction == 90) {
        bmpAnimation.x += bmpAnimation.vX;
    }
    else {
        bmpAnimation.x -= bmpAnimation.vX;
    }

    // update the stage:
    stage.update();
}
